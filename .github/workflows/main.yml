name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
env:
  file_to_build: algo_VTCN.py #file you want to build
  pi_image: raspios_lite_arm64:latest #image you want to use need 64 bit image for pytorch
  path_to_file: CSEE8300_Project/exampleCode #folder that $file_to_build is in
  built_file_name: algo_VTCN #name of the built file


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo #checkout code so most up-to-date version is accessible to the runner
      uses: actions/checkout@main
      with: 
        lfs: true #lfs is github large file storage system
    - name: checkout lfs object
      run: git lfs checkout
    - name: Build test
      uses: pguyot/arm-runner-action@main #this action emulates an ARM CPU and a desired operating system $pi_image
      id: Build-Python-exe
      with:
        image_additional_mb: 3584
        copy_repository_path: /home/pi
        copy_artifact_path: ${{env.path_to_file}}/dist/${{env.built_file_name}}
        base_image: ${{env.pi_image}} #defined in line 11. Lines 34 - 46 does the bulk of the work to build the executable file and the image. to build the executable you need to install all packages you will be using and then use pyinstaller to create the .exe. If you use the image that this yml uploads all of the packages will be present as well as the built file.
        commands: |
            sudo apt-get update -y;
            pwd;
            apt-get install -y python3 python3-venv python3-dev python3-pip; 
            cd ${{env.path_to_file}};
            pip3 install torch;
            pip3 install --upgrade pip;
            pip3 install numpy --upgrade;
            pip3 install -U scikit-learn;
            pip3 install -U matplotlib;
            pip3 install pyinstaller;
            pip3 install nvidia-ml-py3
            pyinstaller --clean --onefile ${{env.file_to_build}};
    - uses: actions/upload-artifact@main
      with:
        name: exe_file
        path: ${{env.built_file_name}}
        if-no-files-found: error
        retention-days: 3

# Lines 55-68 can be used to also upload the .exe file automatically to the raspberry pi if you install the raspberry pi as a github runner. Having the raspberry pi as a runner can create some security risks though. If it is used the repository must be private. Additionally this will only work for one raspberry pi - there are solutions where you could upload to multiple raspberry pi's at once but they would be difficult to implement. One solution could be a matrix job and having the github server to ssh into each raspberry pi
  # upload:
  #   runs-on: raspi
  #   needs: build
  #   steps: 
  #     - name: Checkout repo
  #       uses: actions/checkout@main
  #     - uses: actions/download-artifact@main
  #       with:
  #         name: exe_file
  #     - run: cp ${{env.built_file_name}} /home/pi/
  #     - run: cd /home/pi
  #     - run: chmod +x ${{env.built_file_name}}
  #     # - run: ./${{env.built_file_name}} --label_name=S --dropout=0.1 --train=10min_train.npy --test=10min_test.npy due to the large file size of the example training and test data
  #     # they cannot be added to the repository therefore it errors out when this tries to run. Fear not! simply ssh into the machine and run the code it should work just fine

