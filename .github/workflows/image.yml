name: CI

on: #this job does not run on push requests as it would use up far too much storage
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
env:
  file_to_build: algo_VTCN.py #file you want to build
  pi_image: raspios_lite_arm64:latest #image you want to use - need 64 bit image for pytorch
  path_to_file: CSEE8300_Project/exampleCode #folder that $file_to_build is in
  built_file_name: algo_VTCN #name of the built file


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo #checkout code from respository so most up-to-date version is accessible to the runner
      uses: actions/checkout@main
      with: 
        lfs: true #lfs is github large file storage system
    - name: checkout lfs object
      run: git lfs checkout
    - name: Build test
      uses: pguyot/arm-runner-action@main #this action emulates an ARM CPU and a desired operating system $pi_image defined in line 11
      id: Build-Python-exe
      with:
        image_additional_mb: 3584
        copy_repository_path: /home/pi
        copy_artifact_path: ${{env.path_to_file}}/dist/${{env.built_file_name}} #these variables are defined in line 12 and 13 respectively 
        base_image: ${{env.pi_image}} #defined in line 11. Lines 34 - 46 does the bulk of the work to build the executable file and the image. to build the executable you need to install all packages you will be using and then use pyinstaller to create the .exe. If you use the image that this yml uploads all of the packages will be present as well as the built file.
        commands: |
            sudo apt-get update -y;
            pwd;
            apt-get install -y python3 python3-venv python3-dev python3-pip; 
            cd ${{env.path_to_file}};
            pip3 install torch;
            pip3 install --upgrade pip;
            pip3 install numpy --upgrade;
            pip3 install -U scikit-learn;
            pip3 install -U matplotlib;
            pip3 install pyinstaller;
            pip3 install nvidia-ml-py3
            pyinstaller --clean --onefile ${{env.file_to_build}};
    - name: Compress the release image #lines 47-56 will upload the entire build image in a .xz format - just uncompress it and use raspi imager and the built file as well as all applicable packages installed above will be available
      run: |
        sudo xz -T 0 -v ${{ steps.Build-Python-exe.outputs.image }}
    - name: Upload the image artifact
      uses: actions/upload-artifact@v3 #uploads the image
      with:
        name: build_image
        path: ${{ steps.Build-Python-exe.outputs.image }}.xz
        if-no-files-found: error
        retention-days: 10
